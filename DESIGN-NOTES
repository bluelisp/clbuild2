Differences between clbuild 2.0, quicklisp, and classic clbuild:

  - Download method:

    Classic clbuild downloads through version control.  The advantage is
    hackability of the checkout, the disadvantage is the sluggishness of
    the download method.

    The Quicklisp maintainer prebuilds tarballs, which the client only
    needs to download and extract.

    clbuild 2.0 is a wrapper around quicklisp, but also includes classic
    clbuild's code to download from version-control.  If the latter is
    used, it takes precendence over the former for ASDF loading.

  - Dependency tracking

    classic clbuild had a script to autogenerate dependencies, but its
    maintainers did not run that script particularly often.  It was also
    buggy.

    The Quicklisp maintainer apparently works hard to ensure that
    compatible tarballs are made.  The actual dependency tracking for
    downloads, however, goes through the age-old method of having ASDF
    signal an error when it needs a system not present.  In addition,
    entire distributions can get re-downloaded in one step.

    clbuild 2.0 does not track dependencies at all, and counts on quicklisp
    to do the heavy lifting.

    (Disadvantages of falling back to quicklisp include the need to
    compile while downloading, and lack of a feature to update existing
    version-controlled checkouts together with their dependencies.  But
    it's still better than a dependency file that nobody updates.)
    
  - Lisp invocation

    Like classic clbuild (and unlike Quicklisp), we have shell code to help
    start a Lisp.

    There is a configuration file (clbuild.conf) which specifies which
    Lisp to start.

    Unlike classic clbuild we follow a "Keep It Simple, Stupid" philosophy:

    If LISP_IMPLEMENTATION_TYPE and LISP_BINARY aren't set (or don't
    match each other), we don't attempt to find a binary.

    These two variables replace the old variables
    DEFAULT_LISP_IMPLEMENTATION, SBCL, CCL (etc).  clbuild 2.0 does not
    recognize the old variables.

    Like classic clbuild, we don't load the user configuration (--user-init)
    unless clbuild.conf says otherwise.

  - ASDF setup

    As a first step, clbuild 2.0 ensures that ASDF is loaded by setting up
    quicklisp.  Quicklisp will download a matching version of ASDF if
    needed.

    As a second step, we sanitize ASDF configuration.

    Like classic clbuild, we clear out the *central-registry*.

    But unlike classic clbuild, we (only) support ASDF2.
    So in addition, we clear out the source-registry.

    Yes, you read that right, we reset the entire source registry.
    This is considered a feature, because it makes ASDF more reliable in
    the face of people's ancient ~/.sbcl directories and similar
    annoyances.

    Users wanting to customize things can set up a file
    clbuild/conf.lisp, which will be loaded after ASDF setup.

  - Quicklisp integration and core files

    If clbuild 2.0 can't find ~/quicklisp, it will install it automatically.

    Whenever clbuild 2.0 starts Lisp, it ensures that quicklisp/setup.lisp
    will be loaded.

    To avoid the associated slowdown, clbuild 2.0 always goes though core
    files (in particular, clbuild/sbcl-base.core) which include
    quicklisp and get dumped automatically if they do not exist yet.

    Users will sometimes have to clean out old cores explicitly to make
    clbuild 2.0 aware that they should be rebuilt (e.g. using clbuild
    rm-cores).
